openapi: 3.0.2
info:
  title: gasless TRON service REST api
  version: 2.0.0
  description: Service to publish TRON transactions
  contact:
    name: Support
    email: support@tonkeeper.com
servers:
  - url: "https://tron.tonkeeper.com"
  - url: "https://testnet-tron.tonkeeper.com"
  - url: "http://localhost:5500"
paths:
  /api/v2/settings:
    get:
      description: Get service configuration
      operationId: getSettings
      tags:
        - Tron
      responses:
        '200':
          description: settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TronSettings'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/v2/wallet/{owner_address}:
    get:
      description: Get user wallet address data
      operationId: getWallet
      tags:
        - Tron
      parameters:
        - $ref: '#/components/parameters/ownerAddressParameter'
      responses:
        '200':
          description: wallet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TronWallet'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/v2/balance/{wallet_address}:
    get:
      description: Get wallet balance
      operationId: getWalletBalances
      tags:
        - Tron
      parameters:
        - $ref: '#/components/parameters/walletAddressParameter'
      responses:
        '200':
          description: balances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TronBalances'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/v2/transactions/{transaction_hash}:
    get:
      description: Get transaction data
      operationId: getTransaction
      tags:
        - Tron
      parameters:
        - $ref: '#/components/parameters/transactionHashParameter'
      responses:
        '200':
          description: block
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/v2/wallet/{owner_address}/transactions:
    get:
      description: Get list of transactions
      operationId: getTransactions
      tags:
        - Tron
      parameters:
        - $ref: '#/components/parameters/ownerAddressParameter'
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            maximum: 200
            default: 100
            example: 15
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            example: 10
        - name: min_timestamp
          in: query
          schema:
            type: integer
            format: int32
            default: 0
        - name: max_timestamp
          in: query
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: block
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/v2/wallet/{owner_address}/estimate:
    post:
      description: Get transaction estimate
      operationId: getEstimation
      tags:
        - Tron
      parameters:
        - $ref: '#/components/parameters/ownerAddressParameter'
      requestBody:
        $ref: "#/components/requestBodies/EstimateBody"
      responses:
        '200':
          description: request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimatePayload'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/v2/wallet/{owner_address}/publish:
    post:
      description: Publish transaction
      operationId: publishTransaction
      tags:
        - Tron
      parameters:
        - $ref: '#/components/parameters/ownerAddressParameter'
      requestBody:
        $ref: "#/components/requestBodies/PublishBody"
      responses:
        '200':
          description: block
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishPayload'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  parameters:
    ownerAddressParameter:
      in: path
      name: ownerAddress
      required: true
      description: owner address
      schema:
        type: string
        example: TK11GsFSR7uDSA7ZNFCb6Xq6d5drUB6R7n
    walletAddressParameter:
      in: path
      name: walletAddress
      required: true
      description: wallet address
      schema:
        type: string
        example: TK11GsFSR7uDSA7ZNFCb6Xq6d5drUB6R7n
    transactionHashParameter:
      in: path
      name: transactionHash
      required: true
      description: transaction hash
      schema:
        type: string
        example: d5d6023273fb6488b4a21cb405fd2048e73b508947021554ffd34e36a5051a18

  requestBodies:
    EstimateBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - lifeTime
              - messages
            properties:
              lifeTime:
                type: number
                example: 10000000
              messages:
                type: array
                items:
                  $ref: '#/components/schemas/FromMessage'
    PublishBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - request
              - hash
              - signature
            properties:
              request:
                $ref: '#/components/schemas/RequestData'
              hash:
                type: string
              signature:
                type: string

  schemas:
    PublishPayload:
      type: object
      required:
        - transactionHash
      properties:
        transactionHash:
          type: string
    RequestMessage:
      type: object
      required:
        - to
        - value
        - data
      properties:
        to:
          type: string
          example: TK11GsFSR7uDSA7ZNFCb6Xq6d5drUB6R7n
        value:
          type: string
          example: "10000000"
        data:
          type: string

    RequestData:
      type: object
      required:
        - fee
        - feeToken
        - feeReceiver
        - deadline
        - nonce
        - messages
      properties:
        fee:
          type: string
          example: "100000000"
        feeToken:
          type: string
          example: TK11GsFSR7uDSA7ZNFCb6Xq6d5drUB6R7n
        feeReceiver:
          type: string
          example: TK11GsFSR7uDSA7ZNFCb6Xq6d5drUB6R7n
        deadline:
          type: integer
          example: 10000000
        nonce:
          type: integer
          example: 10000000
        messages:
          type: array
          items:
            $ref: '#/components/schemas/RequestMessage'

    EstimatePayload:
      type: object
      required:
        - request
        - hash
        - internalMsgs
      properties:
        hash:
          type: string
          example: "100000000"
        request:
          $ref: '#/components/schemas/RequestData'
        internalMsgs:
          type: array
          items:
            type: boolean

    FromMessage:
      type: object
      required:
        - to
        - value
      properties:
        to:
          type: string
          example: TK11GsFSR7uDSA7ZNFCb6Xq6d5drUB6R7n
        value:
          type: string
          example: "10000000"
        assetAddress:
          type: string
          example: TK11GsFSR7uDSA7ZNFCb6Xq6d5drUB6R7n

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: error description

    TronToken:
      type: object
      required:
        - name
        - symbol
        - address
        - decimals
        - image
      properties:
        image:
          type: string
          example: https://static.tronscan.org/production/logo/usdtlogo.png
        name:
          type: string
          example: Tether USD
        symbol:
          type: string
          example: USDT
        address:
          type: string
          example: TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t
        decimals:
          type: integer
          example: 6

    TronSettings:
      type: object
      required:
        - walletImplementation
        - chainId
        - tokens
      properties:
        walletImplementation:
          type: string
          example: TK11GsFSR7uDSA7ZNFCb6Xq6d5drUB6R7n
        chainId:
          type: string
          example: 0xcd8690dc
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/TronToken'

    TronWallet:
      type: object
      required:
        - address
        - nonce
        - chainId
      properties:
        address:
          type: string
          example: TK11GsFSR7uDSA7ZNFCb6Xq6d5drUB6R7n
        chainId:
          type: string
          example: 0xcd8690dc
        nonce:
          type: integer
          example: 6


    TronBalance:
      type: object
      required:
        - token
        - weiAmount
      properties:
        token:
          $ref: '#/components/schemas/TronToken'
        weiAmount:
          type: string
          example: "100000000"

    TronBalances:
      type: object
      required:
        - balances
      properties:
        balances:
          type: array
          items:
            $ref: '#/components/schemas/TronBalance'

    TronFee:
      type: object
      required:
        - token
        - amount
      properties:
        amount:
          type: string
          example: "100000000"
        token:
          $ref: '#/components/schemas/TronToken'

    ReceiveTRC20Action:
      type: object
      required:
        - sender
        - amount
        - token
      properties:
        sender:
          type: string
          example: TK11GsFSR7uDSA7ZNFCb6Xq6d5drUB6R7n
        amount:
          type: string
          description: amount in quanta of tokens
          example: 1000000000
        token:
          $ref: '#/components/schemas/TronToken'


    SendTRC20Action:
      type: object
      required:
        - recipient
        - amount
        - token
      properties:
        recipient:
          type: string
          example: TK11GsFSR7uDSA7ZNFCb6Xq6d5drUB6R7n
        amount:
          type: string
          description: amount in quanta of tokens
          example: 1000000000
        token:
          $ref: '#/components/schemas/TronToken'

    ContractDeployAction:
      type: object
      required:
        - address
      properties:
        address:
          type: string
          example: TK11GsFSR7uDSA7ZNFCb6Xq6d5drUB6R7n

    Action:
      type: object
      required:
        - type
        - status
      properties:
        type:
          type: string
          example: "ReceiveTRC20"
          enum:
            - ReceiveTRC20
            - SendTRC20
            - ContractDeploy
        status:
          type: string
          example: "ok"
          enum:
            - ok
            - failed
            - pending
        ReceiveTRC20:
          $ref: '#/components/schemas/ReceiveTRC20Action'
        SendTRC20:
          $ref: '#/components/schemas/SendTRC20Action'
        ContractDeploy:
          $ref: '#/components/schemas/ContractDeployAction'

    Event:
      type: object
      required:
        - txHash
        - timestamp
        - actions
        - fees
        - inProgress
      properties:
        txHash:
          type: string
          example: e8b0e3fee4a26bd2317ac1f9952fcdc87dc08fdb617656b5202416323337372e
        timestamp:
          type: integer
          format: int64
          example: 1234567890
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        fees:
          $ref: '#/components/schemas/TronFee'
        inProgress:
          type: boolean
          example: false
          description: Event is not finished yet. Transactions still happening

    Events:
      type: object
      required:
        - events
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
    InternalError:
      description: Something went wrong on server side
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
    BadRequest:
      description: Something went wrong on client side
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string